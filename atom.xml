<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[karthik selvakumar bhuvaneswaran]]></title>
  <link href="http://ksk.amuzz.in/atom.xml" rel="self"/>
  <link href="http://ksk.amuzz.in/"/>
  <updated>2014-04-24T12:28:47+05:30</updated>
  <id>http://ksk.amuzz.in/</id>
  <author>
    <name><![CDATA[karthik selvakumar bhuvaneswaran]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Excel Sheet Alphabet to decimal Coversion]]></title>
    <link href="http://ksk.amuzz.in/blog/2013/05/07/excel-sheet-alphabet-to-decimal-coversion/"/>
    <updated>2013-05-07T21:22:00+05:30</updated>
    <id>http://ksk.amuzz.in/blog/2013/05/07/excel-sheet-alphabet-to-decimal-coversion</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span>Excel (sheet.rb)</span> <a href='http://ksk.amuzz.in/downloads/code/sheet.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">def</span> <span class="nf">get_max_sum</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">num</span> <span class="o">&lt;</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="mi">26</span><span class="o">**</span><span class="n">num</span><span class="p">)</span><span class="o">+</span><span class="n">get_max_sum</span><span class="p">(</span><span class="n">num</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">cal_sum</span><span class="p">(</span><span class="n">st</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sum</span> <span class="o">=</span> <span class="n">get_max_sum</span><span class="p">(</span><span class="n">st</span><span class="o">.</span><span class="n">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="n">st</span><span class="o">.</span><span class="n">length</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>    <span class="n">sum</span> <span class="o">+=</span> <span class="p">(</span><span class="n">st</span><span class="o">[</span><span class="n">i</span><span class="o">]-</span><span class="mi">97</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="mi">26</span><span class="o">**</span><span class="p">(</span><span class="n">st</span><span class="o">.</span><span class="n">length</span><span class="o">-</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">sum</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="n">cal_sum</span><span class="p">(</span><span class="s1">&#39;abc&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[String - Naive pattern search]]></title>
    <link href="http://ksk.amuzz.in/blog/2013/05/07/string-naive-pattern-search/"/>
    <updated>2013-05-07T21:21:00+05:30</updated>
    <id>http://ksk.amuzz.in/blog/2013/05/07/string-naive-pattern-search</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span>NaiveSearch (naive_pattern_matching.rb)</span> <a href='http://ksk.amuzz.in/downloads/code/naive_pattern_matching.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1"># Complexity: O((n-m+1)*m) </span>
</span><span class='line'><span class="k">def</span> <span class="nf">naive_search</span><span class="p">(</span><span class="n">source</span><span class="p">,</span><span class="n">find</span><span class="p">)</span>
</span><span class='line'>  <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="p">(</span><span class="n">source</span><span class="o">.</span><span class="n">length</span><span class="o">-</span><span class="n">find</span><span class="o">.</span><span class="n">length</span><span class="p">)</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>    <span class="n">find</span><span class="o">.</span><span class="n">length</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">j</span><span class="o">|</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">source</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="n">j</span><span class="o">]</span> <span class="o">!=</span> <span class="n">find</span><span class="o">[</span><span class="n">j</span><span class="o">]</span>
</span><span class='line'>        <span class="k">break</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">j</span> <span class="o">==</span> <span class="p">(</span><span class="n">find</span><span class="o">.</span><span class="n">length</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">i</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">source</span> <span class="o">=</span> <span class="s2">&quot;THIS IS A TEST STRING&quot;</span>
</span><span class='line'><span class="n">find</span><span class="o">=</span><span class="s2">&quot;TEST&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="n">naive_search</span><span class="p">(</span><span class="n">source</span><span class="p">,</span><span class="n">find</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Recursion - Solution for NxN queens]]></title>
    <link href="http://ksk.amuzz.in/blog/2013/05/07/recursion-solution-for-nxn-queens/"/>
    <updated>2013-05-07T21:21:00+05:30</updated>
    <id>http://ksk.amuzz.in/blog/2013/05/07/recursion-solution-for-nxn-queens</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span>QUEEN (queen.rb)</span> <a href='http://ksk.amuzz.in/downloads/code/queen.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">def</span> <span class="nf">safe?</span><span class="p">(</span><span class="n">board</span><span class="p">,</span><span class="n">row</span><span class="p">,</span><span class="n">col</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">display</span><span class="p">(</span><span class="n">board</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">p</span> <span class="s2">&quot;received: row=</span><span class="si">#{</span><span class="n">row</span><span class="si">}</span><span class="s2"> col=</span><span class="si">#{</span><span class="n">col</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.col</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">r</span><span class="o">|</span>
</span><span class='line'>    <span class="nb">p</span> <span class="s2">&quot;horizontal: (</span><span class="si">#{</span><span class="n">r</span><span class="si">}</span><span class="s2">,</span><span class="si">#{</span><span class="n">col</span><span class="si">}</span><span class="s2">)&quot;</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">board</span><span class="o">[</span><span class="n">row</span><span class="o">][</span><span class="n">r</span><span class="o">]</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'>      <span class="k">return</span> <span class="kp">false</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">r</span> <span class="o">=</span> <span class="n">row</span>
</span><span class='line'>  <span class="n">c</span> <span class="o">=</span> <span class="n">col</span>
</span><span class='line'>  <span class="k">while</span> <span class="n">r</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">c</span> <span class="o">&gt;=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="nb">p</span> <span class="s2">&quot;upper diagonal: (</span><span class="si">#{</span><span class="n">r</span><span class="si">}</span><span class="s2">,</span><span class="si">#{</span><span class="n">c</span><span class="si">}</span><span class="s2">)&quot;</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">board</span><span class="o">[</span><span class="n">r</span><span class="o">][</span><span class="n">c</span><span class="o">]</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'>      <span class="k">return</span> <span class="kp">false</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">r</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">c</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">r</span> <span class="o">=</span> <span class="n">row</span>
</span><span class='line'>  <span class="n">c</span> <span class="o">=</span> <span class="n">col</span>
</span><span class='line'>  <span class="k">while</span> <span class="n">r</span> <span class="o">&lt;</span> <span class="n">board</span><span class="o">.</span><span class="n">length</span> <span class="ow">and</span> <span class="n">c</span> <span class="o">&gt;=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="nb">p</span> <span class="s2">&quot; low diagonal: (</span><span class="si">#{</span><span class="n">r</span><span class="si">}</span><span class="s2">,</span><span class="si">#{</span><span class="n">c</span><span class="si">}</span><span class="s2">)&quot;</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">board</span><span class="o">[</span><span class="n">r</span><span class="o">][</span><span class="n">c</span><span class="o">]</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'>      <span class="k">return</span> <span class="kp">false</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">r</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">c</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">solve</span><span class="p">(</span><span class="n">board</span><span class="p">,</span><span class="n">col</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">col</span> <span class="o">&gt;=</span> <span class="n">board</span><span class="o">.</span><span class="n">length</span>
</span><span class='line'>    <span class="k">return</span> <span class="kp">true</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">board</span><span class="o">.</span><span class="n">length</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">safe?</span><span class="p">(</span><span class="n">board</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">col</span><span class="p">)</span>
</span><span class='line'>      <span class="n">board</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">col</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">solve</span><span class="p">(</span><span class="n">board</span><span class="p">,</span><span class="n">col</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="kp">true</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="nb">p</span> <span class="s2">&quot;Backtracking .. &quot;</span>
</span><span class='line'>    <span class="n">board</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">col</span><span class="o">]</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">return</span> <span class="kp">false</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">display</span><span class="p">(</span><span class="n">array</span><span class="p">)</span>
</span><span class='line'>  <span class="n">array</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">a</span><span class="o">|</span>
</span><span class='line'>    <span class="nb">p</span> <span class="n">a</span><span class="o">.</span><span class="n">inspect</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="k">if</span> <span class="o">!</span><span class="no">ARGV</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>  <span class="n">N</span> <span class="o">=</span> <span class="no">ARGV</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="n">N</span> <span class="o">=</span> <span class="mi">4</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">board</span>  <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="n">N</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">board</span> <span class="o">&lt;&lt;</span> <span class="o">[</span><span class="mi">0</span><span class="o">]*</span><span class="n">N</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">solve</span><span class="p">(</span><span class="n">board</span><span class="p">)</span>
</span><span class='line'><span class="nb">display</span><span class="p">(</span><span class="n">board</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Recursion - Contigous increasing by one search in array]]></title>
    <link href="http://ksk.amuzz.in/blog/2013/05/07/recursion-contigous-increasing-by-one-search-in-array/"/>
    <updated>2013-05-07T21:20:00+05:30</updated>
    <id>http://ksk.amuzz.in/blog/2013/05/07/recursion-contigous-increasing-by-one-search-in-array</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span>Array Search (rec_arrray.rb)</span> <a href='http://ksk.amuzz.in/downloads/code/rec_arrray.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1001</span><span class="p">,</span><span class="mi">1001</span><span class="p">,</span><span class="mi">1002</span><span class="p">,</span><span class="mi">1003</span><span class="p">,</span><span class="mi">1004</span><span class="p">,</span><span class="mi">1004</span><span class="p">,</span><span class="mi">1005</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">find</span><span class="p">(</span><span class="n">array</span><span class="p">,</span><span class="n">key</span><span class="p">,</span><span class="n">pos</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">key</span> <span class="o">&lt;</span> <span class="n">array</span><span class="o">[</span><span class="n">pos</span><span class="o">]</span> <span class="ow">or</span> <span class="n">key</span> <span class="o">&gt;</span> <span class="n">array</span><span class="o">[-</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>    <span class="k">return</span> <span class="kp">false</span>
</span><span class='line'>  <span class="k">elsif</span> <span class="n">key</span> <span class="o">&gt;</span> <span class="n">array</span><span class="o">[</span><span class="n">pos</span><span class="o">]</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">find</span><span class="p">(</span><span class="n">array</span><span class="p">,</span><span class="n">key</span><span class="p">,</span><span class="n">pos</span><span class="o">+</span><span class="p">(</span><span class="n">key</span><span class="o">-</span><span class="n">array</span><span class="o">[</span><span class="n">pos</span><span class="o">]</span><span class="p">))</span>
</span><span class='line'>  <span class="k">elsif</span> <span class="n">key</span> <span class="o">==</span> <span class="n">array</span><span class="o">[</span><span class="n">pos</span><span class="o">]</span>
</span><span class='line'>    <span class="k">return</span> <span class="kp">true</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="n">find</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="mi">1004</span><span class="p">)</span>
</span><span class='line'><span class="nb">p</span> <span class="n">find</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="mi">1009</span><span class="p">)</span>
</span><span class='line'><span class="nb">p</span> <span class="n">find</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="nb">p</span> <span class="n">find</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="mi">1001</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Recursion - GCD]]></title>
    <link href="http://ksk.amuzz.in/blog/2013/05/07/recursion-gcd/"/>
    <updated>2013-05-07T21:19:00+05:30</updated>
    <id>http://ksk.amuzz.in/blog/2013/05/07/recursion-gcd</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span>GCD (gcd.rb)</span> <a href='http://ksk.amuzz.in/downloads/code/gcd.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">def</span> <span class="nf">gcd</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">b</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">a</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">gcd</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="n">a</span><span class="o">%</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="n">gcd</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span><span class="mi">11</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Combinatronics - All subsets of a set]]></title>
    <link href="http://ksk.amuzz.in/blog/2013/05/05/combinatronics-all-subsets-of-a-set/"/>
    <updated>2013-05-05T23:58:00+05:30</updated>
    <id>http://ksk.amuzz.in/blog/2013/05/05/combinatronics-all-subsets-of-a-set</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span> (combinatronic_subset.rb)</span> <a href='http://ksk.amuzz.in/downloads/code/combinatronic_subset.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">def</span> <span class="nf">subsets</span><span class="p">(</span><span class="n">str</span><span class="p">)</span>
</span><span class='line'>  <span class="n">n</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">str</span><span class="o">.</span><span class="n">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="n">result</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="n">n</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">&lt;&lt;</span> <span class="n">convert_in_to_set</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">str</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">result</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">convert_in_to_set</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">str</span><span class="p">)</span>
</span><span class='line'>  <span class="n">tmp</span> <span class="o">=</span> <span class="n">x</span>
</span><span class='line'>  <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">set</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>  <span class="k">while</span> <span class="n">tmp</span> <span class="o">&gt;</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">tmp</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'>      <span class="n">set</span> <span class="o">&lt;&lt;</span> <span class="n">str</span><span class="o">[</span><span class="n">index</span><span class="o">.</span><span class="n">.index</span><span class="o">]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">index</span> <span class="o">=</span> <span class="n">index</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">tmp</span> <span class="o">=</span> <span class="n">tmp</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">set</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="n">subsets</span><span class="p">(</span><span class="s1">&#39;abc&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c1">#[&quot;&quot;, &quot;a&quot;, &quot;b&quot;, &quot;ab&quot;, &quot;c&quot;, &quot;ac&quot;, &quot;bc&quot;, &quot;abc&quot;]</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linked List - Loop detection and Removal]]></title>
    <link href="http://ksk.amuzz.in/blog/2013/05/05/linked-list-loop-detection-and-removal/"/>
    <updated>2013-05-05T23:18:00+05:30</updated>
    <id>http://ksk.amuzz.in/blog/2013/05/05/linked-list-loop-detection-and-removal</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span>LoopInList ruby (loop_in_list.rb)</span> <a href='http://ksk.amuzz.in/downloads/code/loop_in_list.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">List</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:next</span> <span class="p">,</span> <span class="ss">:data</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">d</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">data</span> <span class="o">=</span> <span class="n">d</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">has_loop</span>
</span><span class='line'>      <span class="n">hare</span><span class="p">,</span><span class="n">tortoise</span> <span class="o">=</span> <span class="nb">self</span><span class="p">,</span><span class="nb">self</span>
</span><span class='line'>      <span class="k">while</span> <span class="o">!</span><span class="n">hare</span><span class="o">.</span><span class="n">nil?</span> <span class="ow">and</span> <span class="o">!</span><span class="n">hare</span><span class="o">.</span><span class="n">next</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>          <span class="n">tortoise</span> <span class="o">=</span> <span class="n">tortoise</span><span class="o">.</span><span class="n">next</span>
</span><span class='line'>          <span class="n">hare</span> <span class="o">=</span> <span class="n">hare</span><span class="o">.</span><span class="n">next</span><span class="o">.</span><span class="n">next</span>
</span><span class='line'>          <span class="k">if</span> <span class="n">hare</span><span class="o">.</span><span class="n">eql?</span><span class="p">(</span><span class="n">tortoise</span><span class="p">)</span>
</span><span class='line'>              <span class="k">return</span> <span class="kp">true</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="k">return</span> <span class="kp">false</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">remove_loop</span>
</span><span class='line'>      <span class="n">hare</span><span class="p">,</span><span class="n">tortoise</span> <span class="o">=</span> <span class="nb">self</span><span class="p">,</span><span class="nb">self</span>
</span><span class='line'>      <span class="k">while</span> <span class="o">!</span><span class="n">hare</span><span class="o">.</span><span class="n">nil?</span> <span class="ow">and</span> <span class="o">!</span><span class="n">hare</span><span class="o">.</span><span class="n">next</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>          <span class="n">tortoise</span> <span class="o">=</span> <span class="n">tortoise</span><span class="o">.</span><span class="n">next</span>
</span><span class='line'>          <span class="n">hare</span> <span class="o">=</span> <span class="n">hare</span><span class="o">.</span><span class="n">next</span><span class="o">.</span><span class="n">next</span>
</span><span class='line'>          <span class="k">if</span> <span class="n">hare</span><span class="o">.</span><span class="n">eql?</span><span class="p">(</span><span class="n">tortoise</span><span class="p">)</span>
</span><span class='line'>              <span class="k">break</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">hare</span> <span class="o">=</span> <span class="nb">self</span>
</span><span class='line'>    <span class="k">while</span> <span class="o">!</span><span class="n">tortoise</span><span class="o">.</span><span class="n">nil?</span> <span class="ow">and</span> <span class="o">!</span><span class="n">hare</span><span class="o">.</span><span class="n">eql?</span><span class="p">(</span><span class="n">tortoise</span><span class="o">.</span><span class="n">next</span><span class="p">)</span>
</span><span class='line'>      <span class="n">hare</span> <span class="o">=</span> <span class="n">hare</span><span class="o">.</span><span class="n">next</span>
</span><span class='line'>      <span class="n">tortoise</span> <span class="o">=</span> <span class="n">tortoise</span><span class="o">.</span><span class="n">next</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">tortoise</span><span class="o">.</span><span class="n">next</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">test_list</span> <span class="o">=</span> <span class="no">List</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">test_list</span><span class="o">.</span><span class="n">next</span> <span class="o">=</span> <span class="no">List</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="n">test_list</span><span class="o">.</span><span class="n">next</span><span class="o">.</span><span class="n">next</span> <span class="o">=</span> <span class="no">List</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="n">test_list</span><span class="o">.</span><span class="n">next</span><span class="o">.</span><span class="n">next</span><span class="o">.</span><span class="n">next</span> <span class="o">=</span> <span class="no">List</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'><span class="n">test_list</span><span class="o">.</span><span class="n">next</span><span class="o">.</span><span class="n">next</span><span class="o">.</span><span class="n">next</span><span class="o">.</span><span class="n">next</span> <span class="o">=</span> <span class="no">List</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="n">test_list</span><span class="o">.</span><span class="n">next</span><span class="o">.</span><span class="n">next</span><span class="o">.</span><span class="n">next</span><span class="o">.</span><span class="n">next</span><span class="o">.</span><span class="n">next</span> <span class="o">=</span> <span class="n">test_list</span><span class="o">.</span><span class="n">next</span><span class="o">.</span><span class="n">next</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="n">test_list</span><span class="o">.</span><span class="n">has_loop</span>
</span><span class='line'><span class="n">test_list</span><span class="o">.</span><span class="n">remove_loop</span>
</span><span class='line'><span class="nb">p</span> <span class="n">test_list</span><span class="o">.</span><span class="n">has_loop</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Matrix - Robot with block detection]]></title>
    <link href="http://ksk.amuzz.in/blog/2013/05/05/matrix-robot-with-block-detection/"/>
    <updated>2013-05-05T22:35:00+05:30</updated>
    <id>http://ksk.amuzz.in/blog/2013/05/05/matrix-robot-with-block-detection</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span>RobotMatrix ruby (path_to_robot.rb)</span> <a href='http://ksk.amuzz.in/downloads/code/path_to_robot.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">realtime_grid</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'><span class="o">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">is_safe</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">mat</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">mat</span><span class="o">[</span><span class="n">x</span><span class="o">][</span><span class="n">y</span><span class="o">].</span><span class="n">eql?</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">?</span> <span class="kp">true</span> <span class="p">:</span> <span class="kp">false</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">path_finder</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">mat</span><span class="p">,</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'>  <span class="n">path</span> <span class="o">&lt;&lt;</span> <span class="o">[</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="o">]</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">y</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">return</span> <span class="kp">true</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">success</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">x</span> <span class="o">&gt;=</span> <span class="mi">1</span> <span class="ow">and</span> <span class="n">is_safe</span><span class="p">(</span><span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">mat</span><span class="p">)</span>
</span><span class='line'>    <span class="n">success</span> <span class="o">=</span> <span class="n">path_finder</span><span class="p">(</span><span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">mat</span><span class="p">,</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">!</span><span class="n">success</span> <span class="ow">and</span> <span class="n">y</span> <span class="o">&gt;=</span> <span class="mi">1</span> <span class="ow">and</span> <span class="n">is_safe</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">mat</span><span class="p">)</span>
</span><span class='line'>    <span class="n">success</span> <span class="o">=</span> <span class="n">path_finder</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">mat</span><span class="p">,</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">!</span><span class="n">success</span>
</span><span class='line'>    <span class="n">path</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="o">[</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">success</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">display</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>
</span><span class='line'>  <span class="n">arr</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">ar</span><span class="o">|</span>
</span><span class='line'>    <span class="n">ar</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>      <span class="nb">print</span> <span class="n">i</span>
</span><span class='line'>      <span class="nb">print</span> <span class="s1">&#39; &#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">path</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="n">path_finder</span><span class="p">(</span><span class="n">realtime_grid</span><span class="o">.</span><span class="n">length</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">realtime_grid</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">length</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">realtime_grid</span><span class="p">,</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'><span class="nb">display</span><span class="p">(</span><span class="n">realtime_grid</span><span class="p">)</span>
</span><span class='line'><span class="nb">p</span> <span class="n">path</span><span class="o">.</span><span class="n">inspect</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">#Output:</span>
</span><span class='line'><span class="c1">#-------</span>
</span><span class='line'><span class="c1">#1 0 0 1 0</span>
</span><span class='line'><span class="c1">#1 1 0 0 0</span>
</span><span class='line'><span class="c1">#1 1 1 1 1</span>
</span><span class='line'><span class="c1">#0 0 0 0 1</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#&quot;[[3, 4], [2, 4], [2, 3], [2, 2], [2, 1], [1, 1], [1, 0], [0, 0]]&quot;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Prime - Seive of Erastothenes]]></title>
    <link href="http://ksk.amuzz.in/blog/2013/05/05/prime-seive-of-erastothenes/"/>
    <updated>2013-05-05T19:38:00+05:30</updated>
    <id>http://ksk.amuzz.in/blog/2013/05/05/prime-seive-of-erastothenes</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span>SeiveOfErastothens (seive_of_erastothenes.rb)</span> <a href='http://ksk.amuzz.in/downloads/code/seive_of_erastothenes.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">def</span> <span class="nf">set</span><span class="p">(</span><span class="n">array</span><span class="p">,</span><span class="n">num</span><span class="p">)</span>
</span><span class='line'>  <span class="p">((</span><span class="n">num</span><span class="o">**</span><span class="n">num</span><span class="p">)</span><span class="o">.</span><span class="n">.array</span><span class="o">.</span><span class="n">length</span><span class="p">)</span><span class="o">.</span><span class="n">step</span><span class="p">(</span><span class="n">num</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>    <span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">array</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">seive</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">num</span> <span class="o">&lt;</span> <span class="mi">2</span>
</span><span class='line'>    <span class="k">return</span> <span class="kp">nil</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">a</span> <span class="o">=</span> <span class="o">[</span><span class="mi">0</span><span class="o">]*</span><span class="n">num</span>
</span><span class='line'>  <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.num</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">a</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="n">a</span><span class="o">=</span><span class="n">set</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">a</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="n">seive</span><span class="p">(</span><span class="mi">50</span><span class="p">)</span><span class="o">.</span><span class="n">inspect</span>
</span><span class='line'><span class="c1">##Output</span>
</span><span class='line'><span class="c1">#2</span>
</span><span class='line'><span class="c1">#3</span>
</span><span class='line'><span class="c1">#5</span>
</span><span class='line'><span class="c1">#7</span>
</span><span class='line'><span class="c1">#9</span>
</span><span class='line'><span class="c1">#11</span>
</span><span class='line'><span class="c1">#13</span>
</span><span class='line'><span class="c1">#15</span>
</span><span class='line'><span class="c1">#17</span>
</span><span class='line'><span class="c1">#19</span>
</span><span class='line'><span class="c1">#21</span>
</span><span class='line'><span class="c1">#23</span>
</span><span class='line'><span class="c1">#25</span>
</span><span class='line'><span class="c1">#29</span>
</span><span class='line'><span class="c1">#31</span>
</span><span class='line'><span class="c1">#35</span>
</span><span class='line'><span class="c1">#37</span>
</span><span class='line'><span class="c1">#41</span>
</span><span class='line'><span class="c1">#43</span>
</span><span class='line'><span class="c1">#47</span>
</span><span class='line'><span class="c1">#49</span>
</span><span class='line'><span class="c1">#&quot;[0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1]&quot;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Matrix - Rotate a matrix 90* to Right]]></title>
    <link href="http://ksk.amuzz.in/blog/2013/05/05/matrix-rotate-a-matrix-90-star-to-right/"/>
    <updated>2013-05-05T02:17:00+05:30</updated>
    <id>http://ksk.amuzz.in/blog/2013/05/05/matrix-rotate-a-matrix-90-star-to-right</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span>Rotate ruby (rotate_matrix.rb)</span> <a href='http://ksk.amuzz.in/downloads/code/rotate_matrix.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">mat</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">9</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">12</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">13</span><span class="p">,</span><span class="mi">14</span><span class="p">,</span><span class="mi">15</span><span class="p">,</span><span class="mi">16</span><span class="o">]</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">rotate</span><span class="p">(</span><span class="n">img</span><span class="p">)</span>
</span><span class='line'>  <span class="n">n</span> <span class="o">=</span> <span class="n">img</span><span class="o">.</span><span class="n">length</span>
</span><span class='line'>  <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="p">(</span><span class="n">n</span><span class="o">/</span><span class="mi">2</span><span class="p">))</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">layer</span><span class="o">|</span>
</span><span class='line'>    <span class="n">first</span> <span class="o">=</span> <span class="n">layer</span>
</span><span class='line'>    <span class="n">last</span> <span class="o">=</span> <span class="n">n</span> <span class="o">-</span> <span class="n">layer</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>    <span class="p">(</span><span class="n">first</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">last</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>      <span class="n">last_offset</span> <span class="o">=</span> <span class="n">last</span> <span class="o">-</span> <span class="p">(</span> <span class="n">i</span> <span class="o">-</span> <span class="n">first</span> <span class="p">)</span>
</span><span class='line'>      <span class="n">tmp</span> <span class="o">=</span> <span class="n">img</span><span class="o">[</span><span class="n">first</span><span class="o">][</span><span class="n">i</span><span class="o">]</span>
</span><span class='line'>      <span class="n">img</span><span class="o">[</span><span class="n">first</span><span class="o">][</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">img</span><span class="o">[</span><span class="n">last_offset</span><span class="o">][</span><span class="n">first</span><span class="o">]</span>
</span><span class='line'>      <span class="n">img</span><span class="o">[</span><span class="n">last_offset</span><span class="o">][</span><span class="n">first</span><span class="o">]</span> <span class="o">=</span> <span class="n">img</span><span class="o">[</span><span class="n">last</span><span class="o">][</span><span class="n">last_offset</span><span class="o">]</span>
</span><span class='line'>      <span class="n">img</span><span class="o">[</span><span class="n">last</span><span class="o">][</span><span class="n">last_offset</span><span class="o">]</span> <span class="o">=</span> <span class="n">img</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">last</span><span class="o">]</span>
</span><span class='line'>      <span class="n">img</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">last</span><span class="o">]</span> <span class="o">=</span> <span class="n">tmp</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">display</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>
</span><span class='line'>  <span class="n">arr</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">ar</span><span class="o">|</span>
</span><span class='line'>    <span class="n">ar</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>      <span class="nb">print</span> <span class="n">i</span>
</span><span class='line'>      <span class="nb">print</span> <span class="s1">&#39; &#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="nb">p</span> <span class="s2">&quot; Input Matrix &quot;</span>
</span><span class='line'><span class="nb">display</span><span class="p">(</span><span class="n">mat</span><span class="p">)</span>
</span><span class='line'><span class="n">rotate</span><span class="p">(</span><span class="n">mat</span><span class="p">)</span>
</span><span class='line'><span class="nb">p</span> <span class="s2">&quot; Rotated Matrix (90* to right)&quot;</span>
</span><span class='line'><span class="nb">display</span><span class="p">(</span><span class="n">mat</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Output: </span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1">#&quot; Input Matrix &quot;</span>
</span><span class='line'><span class="c1">#1 2 3 4</span>
</span><span class='line'><span class="c1">#5 6 7 8</span>
</span><span class='line'><span class="c1">#9 10 11 12</span>
</span><span class='line'><span class="c1">#13 14 15 16</span>
</span><span class='line'><span class="c1">#&quot; Rotated Matrix (90* to right)&quot;</span>
</span><span class='line'><span class="c1">#13 9 5 1</span>
</span><span class='line'><span class="c1">#14 10 6 2</span>
</span><span class='line'><span class="c1">#15 11 7 3</span>
</span><span class='line'><span class="c1">#16 12 8 4</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Array - Maximum Subsequence with start and end of index]]></title>
    <link href="http://ksk.amuzz.in/blog/2013/04/17/array-maximum-subsequence-with-start-and-end-of-index/"/>
    <updated>2013-04-17T23:53:00+05:30</updated>
    <id>http://ksk.amuzz.in/blog/2013/04/17/array-maximum-subsequence-with-start-and-end-of-index</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span>MaximumSubsequence ruby (maximum_subsequence.rb)</span> <a href='http://ksk.amuzz.in/downloads/code/maximum_subsequence.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">arr</span> <span class="o">=</span> <span class="o">[</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="o">-</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="o">-</span><span class="mi">4</span><span class="p">,</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="o">-</span><span class="mi">5</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">start</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">ending</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">maxsofar</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">maxendinghere</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">max</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="n">j</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">i</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">j</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">arr</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">val</span><span class="p">,</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>  <span class="n">maxendinghere</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">maxendinghere</span> <span class="o">+</span> <span class="n">val</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">maxendinghere</span> <span class="o">&gt;</span> <span class="n">maxsofar</span>
</span><span class='line'>    <span class="n">ending</span> <span class="o">=</span> <span class="n">i</span>
</span><span class='line'>    <span class="n">maxsofar</span> <span class="o">=</span> <span class="n">maxendinghere</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="c1"># Backtrack to find the start </span>
</span><span class='line'><span class="c1"># Another n traversal =&gt; 2n :: O(n)</span>
</span><span class='line'><span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.ending</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">from_end</span><span class="o">|</span>
</span><span class='line'>  <span class="n">sum</span> <span class="o">+=</span> <span class="n">arr</span><span class="o">[</span><span class="n">ending</span> <span class="o">-</span> <span class="n">from_end</span><span class="o">]</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">sum</span> <span class="o">==</span> <span class="n">maxsofar</span>
</span><span class='line'>    <span class="n">start</span> <span class="o">=</span> <span class="n">arr</span><span class="o">.</span><span class="n">length</span> <span class="o">-</span> <span class="n">from_end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="nb">p</span> <span class="s2">&quot; starting from index: </span><span class="si">#{</span><span class="n">start</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="nb">p</span> <span class="s2">&quot; ending at index: </span><span class="si">#{</span><span class="n">ending</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="nb">p</span> <span class="s2">&quot;Maximum sum is: </span><span class="si">#{</span><span class="n">maxsofar</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="c1"># Output:</span>
</span><span class='line'><span class="c1">#&quot; starting from index: 3&quot;</span>
</span><span class='line'><span class="c1">#&quot; ending at index: 12&quot;</span>
</span><span class='line'><span class="c1">#&quot;Maximum sum is: 24&quot;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bit Manipulation - Merge m bits into n bits at given i and j]]></title>
    <link href="http://ksk.amuzz.in/blog/2013/04/11/bit-manipulation-merge-m-bits-into-n-bits-at-given-i-and-j/"/>
    <updated>2013-04-11T18:03:00+05:30</updated>
    <id>http://ksk.amuzz.in/blog/2013/04/11/bit-manipulation-merge-m-bits-into-n-bits-at-given-i-and-j</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span>MergeMBits (merge_m_to_n_bit.rb)</span> <a href='http://ksk.amuzz.in/downloads/code/merge_m_to_n_bit.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">def</span> <span class="nf">clear_and_set</span><span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="n">m</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">j</span> <span class="o">&gt;=</span> <span class="n">n</span><span class="o">.</span><span class="n">length</span> <span class="ow">or</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">0</span>
</span><span class='line'>      <span class="k">return</span> <span class="s1">&#39;ERROR&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="c1"># Create a mask of all 1&#39;s</span>
</span><span class='line'>  <span class="n">mask</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">n</span><span class="o">.</span><span class="n">length</span><span class="o">+</span><span class="mi">1</span><span class="p">))</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>  <span class="c1"># Create right mask with ones only till end</span>
</span><span class='line'>  <span class="n">right</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">n</span><span class="o">.</span><span class="n">length</span><span class="o">-</span><span class="n">j</span><span class="p">))</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'>  <span class="c1"># Shift the mask till &#39;i&#39; and merge with right</span>
</span><span class='line'>  <span class="n">mask</span> <span class="o">=</span> <span class="p">((</span><span class="n">mask</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">j</span><span class="o">-</span><span class="n">i</span><span class="p">))</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">n</span><span class="o">.</span><span class="n">length</span><span class="o">-</span><span class="n">j</span><span class="p">))</span> <span class="o">|</span> <span class="n">right</span>
</span><span class='line'>  <span class="c1"># Reset all these bits at &#39;n&#39;</span>
</span><span class='line'>  <span class="n">cleard</span> <span class="o">=</span> <span class="n">n</span><span class="o">.</span><span class="n">to_i</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">mask</span>
</span><span class='line'>  <span class="c1"># Prepare m for appropriate place</span>
</span><span class='line'>  <span class="n">m</span> <span class="o">=</span> <span class="p">(</span><span class="n">m</span><span class="o">.</span><span class="n">to_i</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">n</span><span class="o">.</span><span class="n">length</span><span class="o">-</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'>  <span class="c1"># Merge &#39;m&#39; into &#39;n&#39;</span>
</span><span class='line'>  <span class="n">cleard</span> <span class="o">=</span> <span class="n">cleard</span> <span class="o">|</span> <span class="n">m</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">cleard</span><span class="o">.</span><span class="n">to_s</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="n">clear_and_set</span><span class="p">(</span><span class="s1">&#39;100000000&#39;</span><span class="p">,</span><span class="s1">&#39;10011&#39;</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Output:</span>
</span><span class='line'><span class="c1"># karthiks-MacBook-Pro-2:code karthikselvakumarbhuvaneswaran$ ruby merge_m_to_n_bit.rb</span>
</span><span class='line'><span class="c1"># &quot;101001100&quot;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bit Manipulation - Floating Decimal to Binary]]></title>
    <link href="http://ksk.amuzz.in/blog/2013/04/11/bit-manipulation-floating-decimal-to-binary/"/>
    <updated>2013-04-11T17:33:00+05:30</updated>
    <id>http://ksk.amuzz.in/blog/2013/04/11/bit-manipulation-floating-decimal-to-binary</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span>decimal_to_binary (decimal_to_binary.rb)</span> <a href='http://ksk.amuzz.in/downloads/code/decimal_to_binary.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">def</span> <span class="nf">print_binary</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">n</span> <span class="o">&gt;=</span> <span class="mi">1</span> <span class="ow">or</span> <span class="n">n</span> <span class="o">&lt;=</span> <span class="mi">0</span>
</span><span class='line'>      <span class="k">return</span> <span class="s2">&quot;ERROR&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">res</span> <span class="o">=</span> <span class="s1">&#39;.&#39;</span>
</span><span class='line'>  <span class="k">while</span> <span class="n">n</span> <span class="o">&gt;</span> <span class="mi">0</span>
</span><span class='line'>      <span class="nb">p</span> <span class="n">n</span>
</span><span class='line'>      <span class="nb">p</span> <span class="n">res</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">res</span><span class="o">.</span><span class="n">length</span> <span class="o">&gt;</span> <span class="mi">32</span>
</span><span class='line'>          <span class="k">return</span> <span class="s1">&#39;ERROR&#39;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="n">r</span> <span class="o">=</span> <span class="n">n</span> <span class="o">*</span> <span class="mi">2</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">r</span> <span class="o">&gt;=</span> <span class="mi">1</span>
</span><span class='line'>          <span class="n">res</span> <span class="o">&lt;&lt;</span> <span class="s1">&#39;1&#39;</span>
</span><span class='line'>          <span class="n">n</span> <span class="o">=</span> <span class="n">r</span><span class="o">-</span><span class="mi">1</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>          <span class="n">res</span> <span class="o">&lt;&lt;</span> <span class="s1">&#39;0&#39;</span>
</span><span class='line'>          <span class="n">n</span> <span class="o">=</span> <span class="n">r</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">res</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">print_frac_binary</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">n</span> <span class="o">&gt;=</span> <span class="mi">1</span> <span class="ow">or</span> <span class="n">n</span> <span class="o">&lt;=</span> <span class="mi">0</span>
</span><span class='line'>      <span class="k">return</span> <span class="s2">&quot;ERROR&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">res</span> <span class="o">=</span> <span class="s1">&#39;.&#39;</span>
</span><span class='line'>  <span class="n">frac</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.</span><span class="mi">5</span>
</span><span class='line'>  <span class="k">while</span> <span class="n">n</span> <span class="o">&gt;</span> <span class="mi">0</span>
</span><span class='line'>      <span class="nb">p</span> <span class="n">n</span>
</span><span class='line'>      <span class="nb">p</span> <span class="n">res</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">res</span><span class="o">.</span><span class="n">length</span> <span class="o">&gt;</span> <span class="mi">32</span>
</span><span class='line'>          <span class="k">return</span> <span class="s1">&#39;ERROR&#39;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">n</span> <span class="o">&gt;=</span> <span class="n">frac</span>
</span><span class='line'>          <span class="n">res</span> <span class="o">&lt;&lt;</span> <span class="s1">&#39;1&#39;</span>
</span><span class='line'>          <span class="n">n</span> <span class="o">=</span> <span class="n">n</span> <span class="o">-</span> <span class="n">frac</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>          <span class="n">res</span> <span class="o">&lt;&lt;</span> <span class="s1">&#39;0&#39;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="n">frac</span> <span class="o">/=</span> <span class="mi">2</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">res</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="n">print_binary</span><span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">78</span><span class="p">)</span>
</span><span class='line'><span class="nb">p</span> <span class="s2">&quot;---------------------&quot;</span>
</span><span class='line'><span class="nb">p</span> <span class="n">print_frac_binary</span><span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">78</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Output:</span>
</span><span class='line'><span class="c1"># karthiks-MacBook-Pro-2:code karthikselvakumarbhuvaneswaran$ ruby decimal_in_binary.rb</span>
</span><span class='line'><span class="c1"># 0.78</span>
</span><span class='line'><span class="c1"># &quot;.&quot;</span>
</span><span class='line'><span class="c1"># 0.56</span>
</span><span class='line'><span class="c1"># &quot;.1&quot;</span>
</span><span class='line'><span class="c1"># 0.1200000000000001</span>
</span><span class='line'><span class="c1"># &quot;.11&quot;</span>
</span><span class='line'><span class="c1"># 0.2400000000000002</span>
</span><span class='line'><span class="c1"># &quot;.110&quot;</span>
</span><span class='line'><span class="c1"># 0.4800000000000004</span>
</span><span class='line'><span class="c1"># &quot;.1100&quot;</span>
</span><span class='line'><span class="c1"># 0.9600000000000009</span>
</span><span class='line'><span class="c1"># &quot;.11000&quot;</span>
</span><span class='line'><span class="c1"># 0.9200000000000017</span>
</span><span class='line'><span class="c1"># &quot;.110001&quot;</span>
</span><span class='line'><span class="c1"># 0.8400000000000034</span>
</span><span class='line'><span class="c1"># &quot;.1100011&quot;</span>
</span><span class='line'><span class="c1"># 0.6800000000000068</span>
</span><span class='line'><span class="c1"># &quot;.11000111&quot;</span>
</span><span class='line'><span class="c1"># 0.36000000000001364</span>
</span><span class='line'><span class="c1"># &quot;.110001111&quot;</span>
</span><span class='line'><span class="c1"># 0.7200000000000273</span>
</span><span class='line'><span class="c1"># &quot;.1100011110&quot;</span>
</span><span class='line'><span class="c1"># 0.44000000000005457</span>
</span><span class='line'><span class="c1"># &quot;.11000111101&quot;</span>
</span><span class='line'><span class="c1"># 0.8800000000001091</span>
</span><span class='line'><span class="c1"># &quot;.110001111010&quot;</span>
</span><span class='line'><span class="c1"># 0.7600000000002183</span>
</span><span class='line'><span class="c1"># &quot;.1100011110101&quot;</span>
</span><span class='line'><span class="c1"># 0.5200000000004366</span>
</span><span class='line'><span class="c1"># &quot;.11000111101011&quot;</span>
</span><span class='line'><span class="c1"># 0.040000000000873115</span>
</span><span class='line'><span class="c1"># &quot;.110001111010111&quot;</span>
</span><span class='line'><span class="c1"># 0.08000000000174623</span>
</span><span class='line'><span class="c1"># &quot;.1100011110101110&quot;</span>
</span><span class='line'><span class="c1"># 0.16000000000349246</span>
</span><span class='line'><span class="c1"># &quot;.11000111101011100&quot;</span>
</span><span class='line'><span class="c1"># 0.3200000000069849</span>
</span><span class='line'><span class="c1"># &quot;.110001111010111000&quot;</span>
</span><span class='line'><span class="c1"># 0.6400000000139698</span>
</span><span class='line'><span class="c1"># &quot;.1100011110101110000&quot;</span>
</span><span class='line'><span class="c1"># 0.2800000000279397</span>
</span><span class='line'><span class="c1"># &quot;.11000111101011100001&quot;</span>
</span><span class='line'><span class="c1"># 0.5600000000558794</span>
</span><span class='line'><span class="c1"># &quot;.110001111010111000010&quot;</span>
</span><span class='line'><span class="c1"># 0.12000000011175871</span>
</span><span class='line'><span class="c1"># &quot;.1100011110101110000101&quot;</span>
</span><span class='line'><span class="c1"># 0.24000000022351742</span>
</span><span class='line'><span class="c1"># &quot;.11000111101011100001010&quot;</span>
</span><span class='line'><span class="c1"># 0.48000000044703484</span>
</span><span class='line'><span class="c1"># &quot;.110001111010111000010100&quot;</span>
</span><span class='line'><span class="c1"># 0.9600000008940697</span>
</span><span class='line'><span class="c1"># &quot;.1100011110101110000101000&quot;</span>
</span><span class='line'><span class="c1"># 0.9200000017881393</span>
</span><span class='line'><span class="c1"># &quot;.11000111101011100001010001&quot;</span>
</span><span class='line'><span class="c1"># 0.8400000035762787</span>
</span><span class='line'><span class="c1"># &quot;.110001111010111000010100011&quot;</span>
</span><span class='line'><span class="c1"># 0.6800000071525574</span>
</span><span class='line'><span class="c1"># &quot;.1100011110101110000101000111&quot;</span>
</span><span class='line'><span class="c1"># 0.36000001430511475</span>
</span><span class='line'><span class="c1"># &quot;.11000111101011100001010001111&quot;</span>
</span><span class='line'><span class="c1"># 0.7200000286102295</span>
</span><span class='line'><span class="c1"># &quot;.110001111010111000010100011110&quot;</span>
</span><span class='line'><span class="c1"># 0.440000057220459</span>
</span><span class='line'><span class="c1"># &quot;.1100011110101110000101000111101&quot;</span>
</span><span class='line'><span class="c1"># 0.880000114440918</span>
</span><span class='line'><span class="c1"># &quot;.11000111101011100001010001111010&quot;</span>
</span><span class='line'><span class="c1"># &quot;ERROR&quot;</span>
</span><span class='line'><span class="c1"># &quot;---------------------&quot;</span>
</span><span class='line'><span class="c1"># 0.78</span>
</span><span class='line'><span class="c1"># &quot;.&quot;</span>
</span><span class='line'><span class="c1"># 0.28</span>
</span><span class='line'><span class="c1"># &quot;.1&quot;</span>
</span><span class='line'><span class="c1"># 0.030000000000000027</span>
</span><span class='line'><span class="c1"># &quot;.11&quot;</span>
</span><span class='line'><span class="c1"># 0.030000000000000027</span>
</span><span class='line'><span class="c1"># &quot;.110&quot;</span>
</span><span class='line'><span class="c1"># 0.030000000000000027</span>
</span><span class='line'><span class="c1"># &quot;.1100&quot;</span>
</span><span class='line'><span class="c1"># 0.030000000000000027</span>
</span><span class='line'><span class="c1"># &quot;.11000&quot;</span>
</span><span class='line'><span class="c1"># 0.014375000000000027</span>
</span><span class='line'><span class="c1"># &quot;.110001&quot;</span>
</span><span class='line'><span class="c1"># 0.006562500000000027</span>
</span><span class='line'><span class="c1"># &quot;.1100011&quot;</span>
</span><span class='line'><span class="c1"># 0.0026562500000000266</span>
</span><span class='line'><span class="c1"># &quot;.11000111&quot;</span>
</span><span class='line'><span class="c1"># 0.0007031250000000266</span>
</span><span class='line'><span class="c1"># &quot;.110001111&quot;</span>
</span><span class='line'><span class="c1"># 0.0007031250000000266</span>
</span><span class='line'><span class="c1"># &quot;.1100011110&quot;</span>
</span><span class='line'><span class="c1"># 0.00021484375000002665</span>
</span><span class='line'><span class="c1"># &quot;.11000111101&quot;</span>
</span><span class='line'><span class="c1"># 0.00021484375000002665</span>
</span><span class='line'><span class="c1"># &quot;.110001111010&quot;</span>
</span><span class='line'><span class="c1"># 9.277343750002665e-05</span>
</span><span class='line'><span class="c1"># &quot;.1100011110101&quot;</span>
</span><span class='line'><span class="c1"># 3.1738281250026645e-05</span>
</span><span class='line'><span class="c1"># &quot;.11000111101011&quot;</span>
</span><span class='line'><span class="c1"># 1.2207031250266454e-06</span>
</span><span class='line'><span class="c1"># &quot;.110001111010111&quot;</span>
</span><span class='line'><span class="c1"># 1.2207031250266454e-06</span>
</span><span class='line'><span class="c1"># &quot;.1100011110101110&quot;</span>
</span><span class='line'><span class="c1"># 1.2207031250266454e-06</span>
</span><span class='line'><span class="c1"># &quot;.11000111101011100&quot;</span>
</span><span class='line'><span class="c1"># 1.2207031250266454e-06</span>
</span><span class='line'><span class="c1"># &quot;.110001111010111000&quot;</span>
</span><span class='line'><span class="c1"># 1.2207031250266454e-06</span>
</span><span class='line'><span class="c1"># &quot;.1100011110101110000&quot;</span>
</span><span class='line'><span class="c1"># 2.6702880862039535e-07</span>
</span><span class='line'><span class="c1"># &quot;.11000111101011100001&quot;</span>
</span><span class='line'><span class="c1"># 2.6702880862039535e-07</span>
</span><span class='line'><span class="c1"># &quot;.110001111010111000010&quot;</span>
</span><span class='line'><span class="c1"># 2.8610229518832853e-08</span>
</span><span class='line'><span class="c1"># &quot;.1100011110101110000101&quot;</span>
</span><span class='line'><span class="c1"># 2.8610229518832853e-08</span>
</span><span class='line'><span class="c1"># &quot;.11000111101011100001010&quot;</span>
</span><span class='line'><span class="c1"># 2.8610229518832853e-08</span>
</span><span class='line'><span class="c1"># &quot;.110001111010111000010100&quot;</span>
</span><span class='line'><span class="c1"># 2.8610229518832853e-08</span>
</span><span class='line'><span class="c1"># &quot;.1100011110101110000101000&quot;</span>
</span><span class='line'><span class="c1"># 1.3709068324985196e-08</span>
</span><span class='line'><span class="c1"># &quot;.11000111101011100001010001&quot;</span>
</span><span class='line'><span class="c1"># 6.258487728061368e-09</span>
</span><span class='line'><span class="c1"># &quot;.110001111010111000010100011&quot;</span>
</span><span class='line'><span class="c1"># 2.533197429599454e-09</span>
</span><span class='line'><span class="c1"># &quot;.1100011110101110000101000111&quot;</span>
</span><span class='line'><span class="c1"># 6.705522803684971e-10</span>
</span><span class='line'><span class="c1"># &quot;.11000111101011100001010001111&quot;</span>
</span><span class='line'><span class="c1"># 6.705522803684971e-10</span>
</span><span class='line'><span class="c1"># &quot;.110001111010111000010100011110&quot;</span>
</span><span class='line'><span class="c1"># 2.0489099306075786e-10</span>
</span><span class='line'><span class="c1"># &quot;.1100011110101110000101000111101&quot;</span>
</span><span class='line'><span class="c1"># 2.0489099306075786e-10</span>
</span><span class='line'><span class="c1"># &quot;.11000111101011100001010001111010&quot;</span>
</span><span class='line'><span class="c1"># &quot;ERROR&quot;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linked List - kth element from last - Recursion ]]></title>
    <link href="http://ksk.amuzz.in/blog/2013/04/11/linked-list-kth-element-from-last-recursion/"/>
    <updated>2013-04-11T03:01:00+05:30</updated>
    <id>http://ksk.amuzz.in/blog/2013/04/11/linked-list-kth-element-from-last-recursion</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span>KthELementList ruby (kth_element_in_list.rb)</span> <a href='http://ksk.amuzz.in/downloads/code/kth_element_in_list.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">List</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:next</span> <span class="p">,</span> <span class="ss">:data</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">d</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">data</span> <span class="o">=</span> <span class="n">d</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">print_list</span>
</span><span class='line'>      <span class="n">root</span> <span class="o">=</span> <span class="nb">self</span>
</span><span class='line'>      <span class="k">while</span> <span class="o">!</span><span class="n">root</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>          <span class="nb">print</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">root</span><span class="o">.</span><span class="n">data</span><span class="si">}</span><span class="s2"> =&gt; &quot;</span>
</span><span class='line'>          <span class="n">root</span> <span class="o">=</span> <span class="n">root</span><span class="o">.</span><span class="n">next</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="nb">p</span> <span class="s2">&quot;NULL&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">kth_element</span><span class="p">(</span><span class="n">node</span><span class="p">,</span><span class="n">k</span><span class="p">,</span><span class="n">l</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="kp">nil</span> <span class="k">if</span> <span class="n">node</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>      <span class="n">list</span> <span class="o">=</span> <span class="n">kth_element</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">next</span><span class="p">,</span><span class="n">k</span><span class="p">,</span><span class="n">l</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">k</span> <span class="o">==</span> <span class="n">l</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">node</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">list</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">test_list</span> <span class="o">=</span> <span class="no">List</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">test_list</span><span class="o">.</span><span class="n">next</span> <span class="o">=</span> <span class="no">List</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="n">test_list</span><span class="o">.</span><span class="n">next</span><span class="o">.</span><span class="n">next</span> <span class="o">=</span> <span class="no">List</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="n">test_list</span><span class="o">.</span><span class="n">next</span><span class="o">.</span><span class="n">next</span><span class="o">.</span><span class="n">next</span> <span class="o">=</span> <span class="no">List</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="n">test_list</span><span class="o">.</span><span class="n">next</span><span class="o">.</span><span class="n">next</span><span class="o">.</span><span class="n">next</span><span class="o">.</span><span class="n">next</span> <span class="o">=</span> <span class="no">List</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="n">test_list</span><span class="o">.</span><span class="n">kth_element</span><span class="p">(</span><span class="n">test_list</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="n">data</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#Output:</span>
</span><span class='line'><span class="c1"># karthiks-MacBook-Pro-2:code karthikselvakumarbhuvaneswaran$ ruby kth_element_in_list.rb</span>
</span><span class='line'><span class="c1"># =&gt; 3</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linked List - Find Palindrome ina linked list]]></title>
    <link href="http://ksk.amuzz.in/blog/2013/04/11/linked-list-find-palindrome-ina-linked-list/"/>
    <updated>2013-04-11T02:53:00+05:30</updated>
    <id>http://ksk.amuzz.in/blog/2013/04/11/linked-list-find-palindrome-ina-linked-list</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span>ListPalindrome ruby (palindrome_list.rb)</span> <a href='http://ksk.amuzz.in/downloads/code/palindrome_list.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">List</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:next</span> <span class="p">,</span> <span class="ss">:data</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">d</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">data</span> <span class="o">=</span> <span class="n">d</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">print_list</span>
</span><span class='line'>      <span class="n">root</span> <span class="o">=</span> <span class="nb">self</span>
</span><span class='line'>      <span class="k">while</span> <span class="o">!</span><span class="n">root</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>          <span class="nb">print</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">root</span><span class="o">.</span><span class="n">data</span><span class="si">}</span><span class="s2"> =&gt; &quot;</span>
</span><span class='line'>          <span class="n">root</span> <span class="o">=</span> <span class="n">root</span><span class="o">.</span><span class="n">next</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="nb">p</span> <span class="s2">&quot;NULL&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">find_length</span>
</span><span class='line'>      <span class="n">root</span> <span class="o">=</span> <span class="nb">self</span>
</span><span class='line'>      <span class="n">l</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>      <span class="k">while</span> <span class="o">!</span><span class="n">root</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>          <span class="n">l</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>          <span class="n">root</span> <span class="o">=</span> <span class="n">root</span><span class="o">.</span><span class="n">next</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">l</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">is_palindrome</span>
</span><span class='line'>      <span class="n">st</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>      <span class="n">node</span> <span class="o">=</span> <span class="nb">self</span>
</span><span class='line'>      <span class="n">l</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>      <span class="k">while</span> <span class="o">!</span><span class="n">node</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>          <span class="k">if</span> <span class="n">l</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="n">find_length</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>              <span class="n">st</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>          
</span><span class='line'>          <span class="k">if</span> <span class="n">l</span> <span class="o">&gt;=</span> <span class="p">(</span><span class="n">find_length</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span> <span class="ow">and</span> <span class="n">st</span><span class="o">[-</span><span class="mi">1</span><span class="o">].</span><span class="n">eql?</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>              <span class="n">st</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>          <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="n">next</span>
</span><span class='line'>          <span class="n">l</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">st</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">test_list</span> <span class="o">=</span> <span class="no">List</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">test_list</span><span class="o">.</span><span class="n">next</span> <span class="o">=</span> <span class="no">List</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="n">test_list</span><span class="o">.</span><span class="n">next</span><span class="o">.</span><span class="n">next</span> <span class="o">=</span> <span class="no">List</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="n">test_list</span><span class="o">.</span><span class="n">next</span><span class="o">.</span><span class="n">next</span><span class="o">.</span><span class="n">next</span> <span class="o">=</span> <span class="no">List</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="n">test_list</span><span class="o">.</span><span class="n">next</span><span class="o">.</span><span class="n">next</span><span class="o">.</span><span class="n">next</span><span class="o">.</span><span class="n">next</span> <span class="o">=</span> <span class="no">List</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="n">test_list</span><span class="o">.</span><span class="n">is_palindrome</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Recursion - Find all subsets of given set]]></title>
    <link href="http://ksk.amuzz.in/blog/2013/04/11/recursion-find-all-subsets-of-given-set/"/>
    <updated>2013-04-11T00:24:00+05:30</updated>
    <id>http://ksk.amuzz.in/blog/2013/04/11/recursion-find-all-subsets-of-given-set</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span>Subset ruby (subsets_of_set.rb)</span> <a href='http://ksk.amuzz.in/downloads/code/subsets_of_set.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">def</span> <span class="nf">get_first</span><span class="p">(</span><span class="n">str</span><span class="p">)</span>
</span><span class='line'>  <span class="n">str</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">exclude_first</span><span class="p">(</span><span class="n">str</span><span class="p">)</span>
</span><span class='line'>  <span class="n">str</span><span class="o">[</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">subsets</span><span class="p">(</span><span class="n">set</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">set</span><span class="o">.</span><span class="n">length</span> <span class="o">&gt;</span> <span class="mi">0</span>
</span><span class='line'>      <span class="n">all_sets</span> <span class="o">=</span> <span class="n">subsets</span><span class="p">(</span><span class="n">exclude_first</span><span class="p">(</span><span class="n">set</span><span class="p">))</span>
</span><span class='line'>      <span class="n">all_sets</span><span class="o">.</span><span class="n">clone</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">val</span><span class="o">|</span>
</span><span class='line'>          <span class="n">all_sets</span> <span class="o">&lt;&lt;</span> <span class="n">val</span><span class="o">+</span><span class="n">get_first</span><span class="p">(</span><span class="n">set</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>  
</span><span class='line'>      <span class="k">return</span> <span class="n">all_sets</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>      <span class="k">return</span> <span class="o">[</span><span class="n">set</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">subsets</span><span class="p">(</span><span class="s1">&#39;abcd&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">sort</span><span class="o">.</span><span class="n">inspect</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#Output:</span>
</span><span class='line'><span class="c1">#[&quot;&quot;, &quot;a&quot;, &quot;b&quot;, &quot;ba&quot;, &quot;c&quot;, &quot;ca&quot;, &quot;cb&quot;, &quot;cba&quot;, &quot;d&quot;, &quot;da&quot;, &quot;db&quot;, &quot;dba&quot;, &quot;dc&quot;, &quot;dca&quot;, &quot;dcb&quot;, &quot;dcba&quot;]</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Recursion - Child and Stair Jumping Problem]]></title>
    <link href="http://ksk.amuzz.in/blog/2013/04/10/recursion-child-and-stair-jumping-problem/"/>
    <updated>2013-04-10T23:47:00+05:30</updated>
    <id>http://ksk.amuzz.in/blog/2013/04/10/recursion-child-and-stair-jumping-problem</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span>ChildStair ruby (child_and_stair.rb)</span> <a href='http://ksk.amuzz.in/downloads/code/child_and_stair.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1"># Child and Stairs </span>
</span><span class='line'><span class="k">def</span> <span class="nf">find_chances_for</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="mi">0</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">elsif</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">(</span> <span class="n">find_chances_for</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">3</span><span class="p">)</span> <span class="o">+</span>
</span><span class='line'>               <span class="n">find_chances_for</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span> <span class="o">+</span>
</span><span class='line'>               <span class="n">find_chances_for</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="nb">p</span> <span class="n">find_chances_for</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Output </span>
</span><span class='line'><span class="c1"># ------</span>
</span><span class='line'><span class="c1"># 4</span>
</span><span class='line'><span class="c1"># Explanation</span>
</span><span class='line'><span class="c1"># -----------</span>
</span><span class='line'><span class="c1"># They are </span>
</span><span class='line'><span class="c1"># (1,1,1)</span>
</span><span class='line'><span class="c1"># (1,2)</span>
</span><span class='line'><span class="c1"># (2,1)</span>
</span><span class='line'><span class="c1"># (3)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Binary Tree - Find Vertical Sum]]></title>
    <link href="http://ksk.amuzz.in/blog/2013/04/08/binary-tree-find-vertical-sum/"/>
    <updated>2013-04-08T20:01:00+05:30</updated>
    <id>http://ksk.amuzz.in/blog/2013/04/08/binary-tree-find-vertical-sum</id>
    <content type="html"><![CDATA[<p><a href="http://www.geeksforgeeks.org/vertical-sum-in-a-given-binary-tree/">Original Source</a></p>

<figure class='code'><figcaption><span>VerticalSum ruby (vertical_sum.rb)</span> <a href='http://ksk.amuzz.in/downloads/code/vertical_sum.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">SUM</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Tree</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:right</span> <span class="p">,</span> <span class="ss">:left</span> <span class="p">,</span> <span class="ss">:data</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">d</span><span class="p">,</span><span class="n">l</span><span class="p">,</span><span class="n">r</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@right</span> <span class="o">=</span> <span class="n">r</span>
</span><span class='line'>    <span class="vi">@left</span> <span class="o">=</span> <span class="n">l</span>
</span><span class='line'>    <span class="vi">@data</span> <span class="o">=</span> <span class="n">d</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">vertical_sums</span><span class="p">(</span><span class="n">node</span><span class="p">,</span><span class="n">dist</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">!</span><span class="n">node</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>      <span class="no">SUM</span><span class="o">[</span><span class="n">dist</span><span class="o">]</span> <span class="o">+=</span> <span class="n">node</span><span class="o">.</span><span class="n">data</span>
</span><span class='line'>      <span class="n">vertical_sums</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">left</span><span class="p">,</span><span class="n">dist</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">vertical_sums</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">right</span><span class="p">,</span><span class="n">dist</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">test_tree</span> <span class="o">=</span> <span class="no">Tree</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="no">Tree</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="no">Tree</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="kp">nil</span><span class="p">,</span><span class="kp">nil</span><span class="p">),</span><span class="no">Tree</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="kp">nil</span><span class="p">,</span><span class="kp">nil</span><span class="p">)),</span>
</span><span class='line'>        <span class="no">Tree</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="no">Tree</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="kp">nil</span><span class="p">,</span><span class="kp">nil</span><span class="p">),</span><span class="no">Tree</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span><span class="kp">nil</span><span class="p">,</span><span class="kp">nil</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="n">test_tree</span><span class="o">.</span><span class="n">vertical_sums</span><span class="p">(</span><span class="n">test_tree</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span> <span class="no">SUM</span><span class="o">.</span><span class="n">inspect</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Output:</span>
</span><span class='line'><span class="c1"># {0=&gt;15, -1=&gt;3, -2=&gt;1, 1=&gt;7, 2=&gt;8}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Regex saves the day - Part 1]]></title>
    <link href="http://ksk.amuzz.in/blog/2013/03/15/regex-saves-the-day-part-1/"/>
    <updated>2013-03-15T23:10:00+05:30</updated>
    <id>http://ksk.amuzz.in/blog/2013/03/15/regex-saves-the-day-part-1</id>
    <content type="html"><![CDATA[<blockquote><p>Regular expression is a good servant but a bad master (analogy to fire in real life)</p></blockquote>

<h2>Before Regular expressions </h2>

<p>I felt strange having regular expressions in my code. I felt it alien.
I was really afraid of regular expressions. I was comfortable using
N number of lsplit,rsplit and gsubs which I could have done thru single regex.
I felt regex are old and it will be replaced by better and simpler libraries.</p>

<h2>Problems with regex - Source: xkcd </h2>

<p><img src="http://imgs.xkcd.com/comics/perl_problems.png"></p>

<h2>After Regular expressions</h2>

<p><a href="http://blog.stevenlevithan.com/archives/10-reasons-to-learn-and-use-regular-expressions">But I was proved wrong</a>.
Regular expressions are not programming languages.
They will never fade off like cobol, fortran or smalltalk. They are immortal entities
of programming. Regular expressions are set of notations which define specific patterns.
Curiosity to find why the regular expressions are named <a href="http://www.grymoire.com/Unix/Regular.html">regular expressions lead me here</a>.
Different programming langauges may add extra spice to Regex, but at its
core it is one and the same. It has limited set of notations with complex behaviour.</p>

<h2>Using Regex everywhere - Source : xkcd </h2>

<p><img src="http://imgs.xkcd.com/comics/regular_expressions.png"></p>

<h2>Simpler the tools are, its complex to get the job done </h2>

<blockquote><p>Everything should be made as simple as possible. But not simpler. (Einstein)</p></blockquote>

<p>This patterns recurs everywhere. <a href="http://en.wikipedia.org/wiki/Brainfuck">Brainfuck</a> is the minimalistic estoeric programming
language with just six notations +, -, &lt;, >, [, ]. But it is impossible ( or nearly impossible ) to
write a product that could be shipped to cutsomers. <a href="http://en.wikipedia.org/wiki/Ruby_(programming_language">Ruby</a>
implementation is internally very complicated
( <a href="http://stackoverflow.com/questions/4967556/ruby-craziness-class-vs-object">Starting from understanding class itself is a singleton object of class</a> ).
But it has vast set of API&#8217;s and notations wherein you could guess the method name you want.It is dynamic
and well suited for rapid application development, only because of it extensive notations
and using convention over configuration approach everywhere.(as in RoR)</p>

<h2>Regular expressions everywhere</h2>

<p>But regular expressions aren&#8217;t horrible to the extent of Brainfuck. It is really usable and it can save the day
if you use it like a pinch of salt.If you overdose it, you would spoil the dish.</p>

<p>I realized they are not old, they are classic.I found support for regex everywhere.
From sql query we execute,to the editor I use (Vim) , to my favourite language ruby.</p>

<h2>Regex in SQL queries</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SELECT file_names REGEXP "^*\.xlsx?" FROM file_tables;</span></code></pre></td></tr></table></div></figure>


<p>This will fetch you all excel 2003,2007 documents from your file_tables databse.</p>

<p><a href="http://dev.mysql.com/doc/refman/5.1/en/regexp.html">Complete Reference here</a></p>

<h2>Regex in Vim</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/\chttps?:\/\/.*?\/</span></code></pre></td></tr></table></div></figure>


<p>This will search for all the urls which are either http or https, embedded in the html file.</p>

<p><a href="http://vimregex.com/">Complete Reference here</a></p>

<h2>Regex in Ruby</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>excel_files = []
</span><span class='line'>
</span><span class='line'>file_lists.each do |file|
</span><span class='line'>  if file =~ /\.xlsx?$/i
</span><span class='line'>    excel_files &lt;&lt; file 
</span><span class='line'>  end 
</span><span class='line'>end </span></code></pre></td></tr></table></div></figure>


<blockquote><p>This will get all the xls and xlsx files from a directory.</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>file_lists.each do |file|
</span><span class='line'>  if ['xls','xlsx','XLS','XLSX'].include? file.split('.').last
</span><span class='line'>    excel_files &lt;&lt; file 
</span><span class='line'>  end 
</span><span class='line'>end </span></code></pre></td></tr></table></div></figure>


<blockquote><p>This would be my approach without regex.</p></blockquote>

<p>The above array may even get worser if the extension has mixed cases
like [&#8216;xls&#8217;,&#8217;xLS&#8217;,&#8217;Xls&#8217;,&#8230;] or additionally I would do a downcase ( crazy right! ).</p>

<p>This is the first code which made me feel regex are cleaner because of no split and include? combination.
( which are now considered to be sins of a programmer )</p>

<h2>Regex Notations </h2>

<ul>
<li>$ Notation here denotes any string ending with</li>
<li>? denotes either zero or one times</li>
<li>i at end of regex after / denotes case insensitive match</li>
<li>escape any symbol with \</li>
<li>. matches a single character</li>
<li>[a-z] for small case match</li>
<li>[A-Z] for capital case</li>
<li>[0-9] or \d to match a digit</li>
<li><a href="http://www.regular-expressions.info/reference.html">More notations here ..</a></li>
</ul>


<h2>Brevity of Regex</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; /\.xlsx?$/i</span></code></pre></td></tr></table></div></figure>


<p>It clearly reads like a poem.</p>

<blockquote><p>Any word which has a dot in between and if it has xls or xlsx
and if the word is ending with that, then report these culprits to your master,
additionally do it case insensitive.</p></blockquote>

<p>As you see above they remain same in all languages and in all tools.
They integrate seamlessly. This is the one tool that works universally the same.</p>

<h2>Regex implementations </h2>

<p>There are different debates on implementation of regex. Regex implementation in
normal programming languages seems to be very slow compared to Thompson NFA.
It is in the difference of milliseconds and microseconds. Which means we don&#8217;t have to worry much about.
If you are curious about these <a href="http://swtch.com/~rsc/regexp/regexp1.html">you can refer here</a></p>

<p>There are some minimal set of <a href="https://github.com/facebook/pyre2">Thompson NFA in re2 module of python</a>.
You can experiment once you master regex.</p>

<h2>Regex are bad masters</h2>

<p>It seems regular expressions are cool. Then why can&#8217;t all the string manipulations
and complex logics combined into single regular expression. The one capsule which
cures all the disease. Like the number 42 which answers all the questions of <a href="http://en.wikipedia.org/wiki/Answer_to_The_Ultimate_Question_of_Life,_the_Universe,_and_Everything#Answer_to_the_Ultimate_Question_of_Life.2C_the_Universe.2C_and_Everything_.2842.29">life ,
universe and everything.</a></p>

<h2>Readablity Problems in regex</h2>

<p>The main reason is readablity. In the world of collaborative coding everyone should be
able to understand the code and readablity is important tradeoff than all other factors ( like optimisation , LOC , etc. ).
<a href="http://www.codinghorror.com/blog/2005/02/regex-use-vs-regex-abuse.html">In codinghorror blog</a>
Jeff mentioned about this <a href="http://www.codinghorror.com/blog/2012/07/new-programming-jargon.html">megamoth</a> regular expressions.</p>

<h2>Bad construction of regex</h2>

<p>There are some greedy notations in regex which can collapse all your assumptions.
In regex specificaly * is a greedy operator. If you don&#8217;t know the proper end of
the string and just match it with * it will fetch all the literals it can till the end.
If you have enabled extended and multiline search then it is still disastrous and at some
point it might hang.</p>

<p>One clever trick I saw people using are using Timouts.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  Timout exceeds more than 1 minute exit this block
</span><span class='line'>    Regular expression block
</span><span class='line'>  end </span></code></pre></td></tr></table></div></figure>


<p>This may avoid our program from being hung but our ultimate goal
of matching may fail due to these types og regex.Other way is
digging a level deep into regex and fix the actual problem.
( which is quiet painfull in regex )</p>

<p>Consider an example:</p>

<blockquote><p>Vampires bites zombies.Zombies bites Mummies.Mummies bites Vampires.</p></blockquote>

<p>If you are interested in who bite whom then you would build a regex like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  result = sentence.match /(.*)bites(.*)/
</span><span class='line'>
</span><span class='line'>  puts "Parasite: #{result[1]}"
</span><span class='line'>  # =&gt; Parasite: Vampires bites zombies.Zombies bites Mummies.Mummies bites
</span><span class='line'>
</span><span class='line'>  puts "Victim: #{result[2]}"
</span><span class='line'>  # =&gt; Victimit: Vampires</span></code></pre></td></tr></table></div></figure>


<p>This is not what we wanted.Parasite has fetched the whole sentenct till it finds the last one.
Yep as the name suggests it is definitely greedy.I usually test with very limited
or no test sometimes and put this types of regex on production.</p>

<h2>Testing Regex with Bad test case </h2>

<p>My test case would be</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  Test String: "X bites Y"
</span><span class='line'>  Parasite: X
</span><span class='line'>  Victim: Y </span></code></pre></td></tr></table></div></figure>


<p>Eureka! it works. I would happily commit it.
But on some worst case if we find &#8216;bites&#8217; at end of
a 2 TB log file imagine what would be the matching string.
Hence exhaustive testing each regex as an unit and
as a whole if they are combined with &#8216;|&#8217; would be necessary.
We should be expecting the unexpected.</p>

<h2>(?) The Lion tamer</h2>

<p>Inorder to attenuate the greediness of this &#8216;*&#8217; we can use &#8216;?&#8217; at end of it.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  result = sentence.match /(.*?)bites(.*?)\/</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>This would be the non-greedy version of our regex.</p>

<h2>Additional Language features</h2>

<p>There are some more syntactic sugar added to regex in ruby 1.9.2
which would makes things more simple with hashed matches.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  result = sentence.match /(?&lt;Parasite&gt;.*?)bites(?&lt;Victim&gt;.*?)\/
</span><span class='line'>  result.inspect 
</span><span class='line'>  { "Parasite": "X" , "Victim": "Y"}</span></code></pre></td></tr></table></div></figure>


<h2>Catastrophic Backtracking - weird problems in Regex</h2>

<p>This may occur while we use regex negligently and redundantly.
<a href="http://www.regular-expressions.info/catastrophic.html">This article</a> clearly
explains the possible cases on how a naive programmer could misue regex.</p>

<p>Consider an Example:</p>

<ul>
<li>We want to extract time from a file.</li>
<li>patterns can be 7am , 12pm , etc</li>
<li>Instead of the pattern \d\d?(am|pm) if we came up with wrong Regex /(\d+)+(am|pm)/ then this regular expression will never exit.</li>
</ul>


<p>Try running <a href="http://rubular.com/r/DTz3YI1EWB">this regex on rubular</a>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  /(\d+)+am/
</span><span class='line'>  # on string: "123332432424524524542542363465326524" which doesn't have am or pm at the end.</span></code></pre></td></tr></table></div></figure>


<p><a href="www.rubular.com">Rubular</a> is really a good site to start playing with wide variety of regular expressions.</p>

<h2>Regex for web-developers</h2>

<p>Most of my ignorance to regex for a long time was due to my wrong assumptions.
I assumed regex are for nerds who write new programming languages. Geeks who
optimizes the compiler instructions. Data scientists who dig deep into web logs
and all sorts of unstructured big datas. May be I am true to some extent.
Web-developers may not need to write a new regular expression parser but we really need
some set of regex which occurs in our javascript validation day-to-day.
<a href="http://web.archive.org/web/20090318193321/http://immike.net/blog/2007/04/06/5-regular-expressions-every-web-programmer-should-know/">This post gives five basic regex which every regex programmer should know.</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mischeivous bang(!) operator in Ruby]]></title>
    <link href="http://ksk.amuzz.in/blog/2013/03/15/mischeivous-bang-operator-in-ruby/"/>
    <updated>2013-03-15T16:02:00+05:30</updated>
    <id>http://ksk.amuzz.in/blog/2013/03/15/mischeivous-bang-operator-in-ruby</id>
    <content type="html"><![CDATA[<p>This is a typical ruby programmer&#8217;s style of overwriting on the same object:</p>

<pre><code>array = [1.2 , 2.7] 
array.map!(&amp;:floor)
</code></pre>

<p>This will modify my same object <em>array</em>.</p>

<pre><code>puts array
#=&gt; [1,2]
</code></pre>

<p>Similarly, the below code removes <strong>nil</strong> values from an array :</p>

<pre><code>array = [1 , 2, nil, 3, nil, 5]
new_array = array.compact
puts new_array
#=&gt; [1,2,3,5]
</code></pre>

<p>But if we try to use bang operator for compact we will end up with nil for no nil value cases in an array.</p>

<pre><code>array = [1 , 2, 3] # No nil values present
array.compact!
puts array
#=&gt; nil
</code></pre>

<p>This can easily escapes from our eyes while debugging the code.</p>

<p>http://ruby-doc.org/core-1.9.3/Array.html#method-i-collect-21</p>
]]></content>
  </entry>
  
</feed>
