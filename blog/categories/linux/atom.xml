<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | Hacker's Diary]]></title>
  <link href="http://karthikselva.github.com/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://karthikselva.github.com/"/>
  <updated>2013-05-05T23:20:25+05:30</updated>
  <id>http://karthikselva.github.com/</id>
  <author>
    <name><![CDATA[karthikselva's log]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[lock and unlock gnome with gsm]]></title>
    <link href="http://karthikselva.github.com/blog/2010/02/23/lock-and-unlock-gnome-with-gsm/"/>
    <updated>2010-02-23T05:48:22+05:30</updated>
    <id>http://karthikselva.github.com/blog/2010/02/23/lock-and-unlock-gnome-with-gsm</id>
    <content type="html"><![CDATA[<h1><strong><em>Tested with :</em></strong></h1>

<ol>
<li><p>ubuntu 8.10</p></li>
<li><p>gnokii</p></li>
<li><p>mysql 5</p></li>
<li><p>lg kp 199</p></li>
</ol>


<h1><em><strong>Functionalities :</strong></em></h1>

<ol>
<li><p>just message "<strong>lock</strong>" to your server mobile to lock the screen</p></li>
<li><p>  "<strong>unlock</strong>" to release the screen</p></li>
<li><p>you can even change the pidgin status by messaging "<strong>status:your status here</strong> "</p></li>
</ol>


<p>4.  execute any shell commands that take return value  below 160  characters</p>

<h1><em><strong>Procedure:</strong></em></h1>

<h2><strong><em>step 1) </em></strong></h2>

<ul>
<li>set the memory for sms to sim and run the smsd daemon as</li>
</ul>


<p><strong>sudoo /usr/sbin/smsd -u root -d smsgw -c localhost -m mysql -u root --password=password -b SM -f /var/log/smsdaemon.log</strong></p>

<h2><em><strong>step 2)</strong></em></h2>

<ul>
<li>run this python script  and minimize the shell</li>
</ul>


<p>``` python</p>

<h1>!/usr/bin/python</h1>

<h1>    before running this program you must configured gnokii-smsd and it must be up and running</h1>

<h1>    @Author:    Karthik selvakumar</h1>

<h1>    Name :     Dictionary Server</h1>

<h1>install python-MySQLdb  before importing this module</h1>

<p>import MySQLdb
import os
processed=1;
while(True):
  host="localhost"
  user="root"
  passwd="123456"
  db="smsgw"</p>

<p>  db=MySQLdb.connect(host,user,passwd,db)
  cursor=db.cursor()
  cursor.execute("delete from inbox where text=\"\"")
  cursor.execute(" select number,text,id,processed from inbox where id=(select max(id) from inbox)")
  record=cursor.fetchall()
  for result in record:</p>

<pre><code>word=result[1]
number=result[0]
row=result[2]
processed=result[3]

if(processed==0):
</code></pre>

<h1>script to get meaning of a word from google server</h1>

<pre><code>  if(word=="lock"):
    up="gnome-screensaver-command --lock";

  elif(word=="unlock"):
    up="xset dpms force on &amp;&amp; gnome-screensaver-command -d";

  elif(word.startswith("status:")):
    up=" purple-remote \"setstatus?status=available&amp;message="+str(word.replace("status:",""))+"\"";

  else:
    up=word+" &gt;meaning.txt";
</code></pre>

<h1>set the entity to be processed when taken out</h1>

<pre><code>cursor.execute(" update inbox  set processed=1 where id="+str(row));
</code></pre>

<h1>run the command in shell and write it to file named meaning.txt</h1>

<pre><code>  os.system(up)
  filehandle=open('meaning.txt','r')
</code></pre>

<h1>load the meaning in the string text</h1>

<pre><code>  text=filehandle.read()
  print " text is "+text;
  filehandle.close()
  if(text!=""):
    cursor.execute("insert into outbox(number,text) values(%s,%s)",(number,text))
  cursor.close()
  db.close()
</code></pre>

<p>```</p>

<h2><em><strong>step 3)</strong></em></h2>

<ul>
<li>You are done. Now message to the mobile you have connected like <strong>lock or unlock or status:status</strong> to see the magic happen :)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A simple start to SVN]]></title>
    <link href="http://karthikselva.github.com/blog/2010/02/18/a-simple-start-to-svn/"/>
    <updated>2010-02-18T05:10:10+05:30</updated>
    <id>http://karthikselva.github.com/blog/2010/02/18/a-simple-start-to-svn</id>
    <content type="html"><![CDATA[<p>SVN is a version control system used to track your various versions of your software over various levels called <strong>Revisions</strong>.</p>

<p>Basically every software will be stored in SVN as REPO called <strong>Repositories .</strong></p>

<p><em><strong>Step1 :</strong></em></p>

<p>First before starting with your coding create a repo name in SVN as :</p>

<p><strong>svnadmin create<your-repo-name></strong></p>

<p>e.g) svnadmin create mediaplayer</p>

<p>now you have created a repo named <strong>mediaplayer</strong></p>

<p>this copy is the master copy for all clients</p>

<p>this will be a directory with some system defined files in it</p>

<p>note the directory you have  created a repositiory</p>

<p><em><strong>Step 2:</strong></em></p>

<p>now you cannot directly do modify on master copy</p>

<p>you have to checkout this repo to some workspace and start working</p>

<p>let it be a directory called workspace</p>

<p><strong>mkdir workspace</strong></p>

<p><strong>cd workspace</strong></p>

<p>now you can checkout the master copy and start your coding process</p>

<p><strong>svn co file:///home/<user-name>/<repo-name></strong></p>

<p>eg:)  svn co file:///home/karthik/mediaplayer</p>

<p>now you will have a directory named mediaplayer</p>

<p>go into the directory  by</p>

<p><strong>cd mediaplayer</strong></p>

<p>then start a code name it as <strong>myfile.java</strong></p>

<p>now save it in this directory  . To add this into your master copy do</p>

<p><strong>svn add  <file-name></strong></p>

<p>eg) svn add myfile.java</p>

<p><em><strong>Step 3:</strong></em></p>

<p>you can optionally use these commands</p>

<p><strong>i) svn commit</strong> - to  commit the current modification to the master copy ( Do this whenever you do minor changes to you files)</p>

<p><strong>ii) svn status</strong> - to check the status of files in working copy</p>

<p><strong>here </strong><strong>? </strong>means unknown <strong> A </strong>means added<strong> M</strong> means modified but not added</p>

<p><strong>iii) svn update</strong> - to update to the latest revision of the master copy ( this will be usefull when more than one client has modified the master copy without your knowledge )</p>

<p><a href="http://www.linuxfromscratch.org/blfs/edguide/chapter03.html">for more details refere here </a></p>

<p>Thank you :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running SMS Dictionary server  in your  Home ]]></title>
    <link href="http://karthikselva.github.com/blog/2010/02/14/running-sms-dictionary-server-in-your-home/"/>
    <updated>2010-02-14T04:29:35+05:30</updated>
    <id>http://karthikselva.github.com/blog/2010/02/14/running-sms-dictionary-server-in-your-home</id>
    <content type="html"><![CDATA[<p><em>Do you want to run a dictionary server that messages you the actual meaning</em></p>

<p><em><strong>Requirments :</strong></em></p>

<p>i)  A GSM mobile phone</p>

<p>ii)  Linux  with python</p>

<p>iii) Mysql Database</p>

<p>iv)  Gnokii-SMSD</p>

<p>You must be sure that<strong> gnokii-smsd</strong> is up and running and database is available</p>

<p><a href="http://karthikselvakumar.wordpress.com/2009/10/30/abc-to-qwerty-messaging/">if not refer to my previous post here</a></p>

<p><em><strong>Code :</strong></em></p>

<p>This code simply connects to dictionary.org and gets the meaning for the word that is latest in INBOX table and writes the meaning to OUTBOX table which will be sent to user later .May have bugs in it please report me at earliest :)</p>

<p>copy and paste the code to a file . let it be <strong>dict_server.py</strong> . code is below :</p>

<p><em>#!/usr/bin/python</em></p>

<p>_#    before running this program you must configured gnokii-smsd and it must be up and running</p>

<h1>    @Author:    Karthik selvakumar</h1>

<h1>    Name :     Dictionary Server_</h1>

<p><em># install python-MySQLdb  before importing this module</em></p>

<p><em>import MySQLdb</em></p>

<p><em># imported inorder to perform shell operations</em></p>

<p><em>import os</em></p>

<p><em># run as a daemon and never exit this thread</em></p>

<p><em>while(True):</em></p>

<p><em>#defines the database parameter change according to your configuration</em></p>

<p><em>host="localhost"</em></p>

<p><em>user="root"</em></p>

<p><em>passwd="password"</em></p>

<p><em>db="smsgw"</em></p>

<p><em>#creates a database object for corresponding config</em></p>

<p><em>db=MySQLdb.connect(host,user,passwd,db)</em></p>

<p><em>cursor=db.cursor()</em></p>

<p><em>#performs pruning of inbox table which may contain null entities</em></p>

<p><em>cursor.execute("delete from inbox where text=\"\"")</em></p>

<p><em>#gets the latest entered SMS from Mysql server</em></p>

<p><em>cursor.execute(" select number,text,id from inbox where id=(select max(id) from inbox)");</em></p>

<p><em>record=cursor.fetchall()</em></p>

<p><em>for result in record:</em></p>

<p><em># gets the word to find meaning</em></p>

<p><em>word=result[1]</em></p>

<p><em># get the number bcoz u have to reply the meaning to this number later ;)</em></p>

<p><em>number=result[0]</em></p>

<p><em>row=result[2]</em></p>

<p><em># script to get meaning of a word from google server</em></p>

<p><em>up='/usr/bin/curl -s -A \'Mozilla/4.0\' \'http://www.google.com/search?q=define%3A\''</em></p>

<p><em>low='| html2text -ascii -nobs -style compact -width 500 | grep "*" | head -n 1 -q | tail -n 1 > meaning.txt'</em></p>

<p><em># run the command in shell and write it to file named meaning.txt</em></p>

<p><em>os.system(up+word+low)</em></p>

<p><em># open the file in read only mode</em></p>

<p><em>filehandle=open('meaning.txt','r')</em></p>

<p><em># load the meaning in the string text</em></p>

<p><em>text=filehandle.read()</em></p>

<p><em># we no more need this</em></p>

<p><em>filehandle.close()</em></p>

<p><em># insert into outbox table which will send the meaning of the word to the phone number later</em></p>

<p><em>cursor.execute("insert into outbox(number,text) values(%s,%s)",(number,text))</em></p>

<p><em># close all active connections :)</em></p>

<p><em>cursor.close()</em></p>

<p><em>db.close()</em></p>

<p><em>#thank you !</em></p>

<p>now run the dictionary daemon by running <strong>python dict_server.py</strong> in terminal</p>

<p>whenever a message is received to your mobile it will be read by dict_server.py and meaning of that word will be in outbox table</p>

<p>to see run <strong>select * from outbox ;</strong> in mysql console</p>

<p>Enjoy :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing Network Simulator 2 in Ubuntu ]]></title>
    <link href="http://karthikselva.github.com/blog/2010/02/10/installing-network-simulator-2-in-ubuntu/"/>
    <updated>2010-02-10T22:08:25+05:30</updated>
    <id>http://karthikselva.github.com/blog/2010/02/10/installing-network-simulator-2-in-ubuntu</id>
    <content type="html"><![CDATA[<p><em>Are you baffled by random errands saying "  ns2 doesn't work on ubuntu " and so ?</em></p>

<p><em>Are you a linux geek don't wanna boot to windows for network simulator software ?</em></p>

<p><em>did your lab admin made a mess with your system in the name of installing ns2 :D ?</em></p>

<p>_then you are in a right place :)
_</p>

<p><strong>You can make NS working in your system by putting little effort  on your ubuntu :)</strong></p>

<p><em><strong>Step 1:</strong></em></p>

<p>Download <a href="http://sourceforge.net/projects/nsnam/files/">network simulator software from here </a></p>

<p>if you prefer other old versions you can swich by viewing files in that page</p>

<p>the file will be of almost 57 MB</p>

<p><em><strong>Step 2: </strong></em></p>

<p>Extract the files to your own desired directory</p>

<p>I did in <strong>/home/karthik/Desktop/ </strong></p>

<p><em><strong>step 3:</strong></em></p>

<p>now go to your working directory of ns2 by</p>

<p><strong>cd /home/karthik/Desktop/ns-allinone-2.34</strong></p>

<p><em><strong>step 4:</strong></em></p>

<p>Run this command to check any unresolved dependencies existing between installation</p>

<p><strong>sudo apt-get install build-essential autoconf automake libxmu-dev</strong></p>

<p>run the command <strong>./install</strong> in terminal</p>

<p>it will take around 5 minutes</p>

<p><em><strong>step 5:</strong></em></p>

<p>Well Thats were your installation of ns2 exits :)</p>

<p>now you have to configure to make it alive</p>

<p>you have to edit in the shell</p>

<p>run <strong>gedit ~./bashrc</strong></p>

<p>add at end of the file this lines</p>

<p>remember change  <strong>/home/karthik/Desktop/ </strong>to your file path say <strong>/home/host-name/</strong></p>

<p><strong>
</strong></p>

<p><em># LD_LIBRARY_PATH
OTCL_LIB=/home/karthik/Desktop/ns-allinone-2.34/otcl-1.13
NS2_LIB=/home/karthik/Desktop/ns-allinone-2.34/lib
X11_LIB=/usr/X11R6/lib
USR_LOCAL_LIB=/usr/local/lib
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$OTCL_LIB:$NS2_LIB:$X11</em>
LIB:$USR_LOCAL_LIB_</p>

<p><em># TCL_LIBRARY
TCL_LIB=/home/karthik/Desktop/ns-allinone-2.34/tcl8.4.18/library
USR_LIB=/usr/lib
export TCL_LIBRARY=$TCL_LIB:$USR_LIB</em></p>

<p><em># PATH
XGRAPH=/home/karthik/Desktop/ns-allinone-2.34/bin: /home/karthik/Desktop/
ns-allinone-2.34/tcl8.4.18/unix : /home/karthik/Desktop/ns-allinone-2.34/tk8.4.18/unix
NS=/home/karthik/Desktop/ns-allinone-2.34/ns-2.34/
NAM=/home/karthik/Desktop/ns-allinone-2.34/nam-1.14/
PATH=$PATH:$XGRAPH:$NS:$NAM</em></p>

<p>now save the file and close it</p>

<p>run<strong> source ~/.bashrc</strong></p>

<p>ignore if any errors ;)</p>

<p>then run<strong> ./validate</strong></p>

<p>this is the longest step it takes <strong>30-45 minutes</strong> hence you can have a meal during the course of time ;)</p>

<p><em><strong>step 6: </strong></em></p>

<p>this  is editing thing ( optional )</p>

<p>just make  links to the files in <strong>/home/karthik/Desktop/ns-allinone-2.34/bin </strong> by right click on all files and choose <strong>make link</strong></p>

<p>copy  all and paste to <strong>/usr/bin/ </strong>directory  by running</p>

<p><strong>sudo nautilus</strong></p>

<p>then<strong> rename</strong> the file name for eg) <strong>link to ns </strong> to <strong>ns</strong> and so on . do this till all files are renamed .</p>

<p><em><strong>step 7: </strong></em></p>

<p>Sample code</p>

<p>now u can check out a demo to test you ns 2 by writing a sample code as below :</p>

<p><em>#Create a simulator object
set ns [new Simulator]</em></p>

<p><em>#Open the nam trace file
set nf [open out.nam w]
$ns namtrace-all $nf</em></p>

<p>_#Define a 'finish' procedure
proc finish {} {
global ns nf
$ns flush-trace</p>

<h1>Close the trace file</h1>

<p>close $nf</p>

<h1>Execute nam on the trace file</h1>

<p>exec nam out.nam &amp;
exit 0
}_</p>

<p><em>#Create two nodes
set n0 [$ns node]
set n1 [$ns node]</em></p>

<p><em>#Create a duplex link between the nodes
$ns duplex-link $n0 $n1 1Mb 10ms DropTail</em></p>

<p><em>#Call the finish procedure after 5 seconds of simulation time
$ns at 5.0 "finish"</em></p>

<p><em>#Run the simulation
$ns run</em></p>

<p>now copy this code and paste to a file say  <strong>myfirstprogram.tcl</strong></p>

<p>then run <strong>ns myfirstprogram.tcl</strong></p>

<p>you must see a window like this :</p>

<p><a href="http://karthikselvakumar.files.wordpress.com/2010/02/my_ubuntu_ns2.png"><img src="http://karthikselvakumar.files.wordpress.com/2010/02/my_ubuntu_ns2.png" alt="my ubuntu screen running NS2" /></a></p>

<p>and  ...   You did it , Enjoy   :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cursor Play With your  neigbour System]]></title>
    <link href="http://karthikselva.github.com/blog/2010/02/01/cursor-play-with-your-neigbour-system/"/>
    <updated>2010-02-01T03:33:06+05:30</updated>
    <id>http://karthikselva.github.com/blog/2010/02/01/cursor-play-with-your-neigbour-system</id>
    <content type="html"><![CDATA[<p>_If you have more than one system and need to acces all with a single mouse ?
_</p>

<p><em>Wanna hack your neigbour node and drive him mad?</em></p>

<p>_
_</p>

<p>you can use this code to move the cursor</p>

<p>and with little modification you can emulate a whole mouse and keyboard functionalities too ...</p>

<p><strong><a href="http://www.box.net/shared/dgkikzmvjl">Download My code from here
</a></strong></p>

<p><strong>
</strong></p>

<p><em><strong>To Do :</strong></em></p>

<p><em><strong>
</strong></em></p>

<p>step i) run the server.class first in machine u want to control say A</p>

<pre><code>&lt;strong&gt;java server &lt;port_numbr 1000-65535&gt;&lt;/strong&gt;
</code></pre>

<p><strong>
</strong></p>

<p>step ii) run the client.class in second machine u have the mouse say B</p>

<pre><code>&lt;strong&gt;java client &lt;ip of machine say 10.2.3.1 &gt; &lt;port_number_server 1000-65535&gt;&lt;/strong&gt;
</code></pre>

<p><strong>
</strong></p>

<p>step iii) move  mouse in machine B so that it moves on machine A</p>

<p><em><strong>Algorithm behind :</strong></em></p>

<p><em><strong> </strong></em>i)  get the mouse position from master machine</p>

<p>ii) send the position in a '<strong>encrypt</strong>' string with X and Y positions merged</p>

<p>as <strong>encrypt=X*10000+Y</strong> ( I use 10000  here assuming your screen resolution is not more than 10000X10000 :D )</p>

<p>iii) send the string to slave node using Socket output stream</p>

<p>iv) get the encrypt string and extract x and Y position  by</p>

<p><strong>X=encrypt/10000;</strong></p>

<p><strong>y=encrypt - X;</strong></p>

<p><strong>
</strong></p>

<p>v) Now move the position of slave machine by <strong>mousemove(X,Y)</strong> method</p>

<p>vi) You can add leftclick , right click and <strong>keyboard keys</strong> too as above  :)</p>
]]></content>
  </entry>
  
</feed>
